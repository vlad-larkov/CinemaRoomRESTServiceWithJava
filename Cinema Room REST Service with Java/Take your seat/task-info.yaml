type: edu
files:
  - name: src/cinema/Main.java
    visible: true
    text: |
      package cinema;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class Main {
          public static void main(String[] args) {
              SpringApplication.run(Main.class, args);
          }
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      server.port=28852
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/CinemaTests.java
    visible: false
    text: |
      import com.google.gson.Gson;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonObjectBuilder;
      
      import java.util.Map;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      public class CinemaTests extends SpringTest {
          private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
          private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
      
          private static final int totalRows = 9;
          private static final int totalCols = 9;
          private static final Gson gson = new Gson();
      
          private static void checkStatusCode(HttpResponse resp, int status) {
              if (resp.getStatusCode() != status) {
                  throw new WrongAnswer(
                      resp.getRequest().getMethod() + " " +
                          resp.getRequest().getLocalUri() +
                          " should respond with status code " + status + ", " +
                          "responded: " + resp.getStatusCode() + "\n\n" +
                          "Response body:\n\n" + resp.getContent()
                  );
              }
          }
      
          CheckResult testEndpoint() {
              HttpResponse response = get("/seats").send();
              checkStatusCode(response, 200);
              return CheckResult.correct();
          }
      
          CheckResult testEndpointAvailableSeats() {
              HttpResponse response = get("/seats").send();
      
              JsonArrayBuilder arrayBuilder = isArray(totalRows * totalCols);
              for (int i = 1; i <= totalRows; i++) {
                  for (int j = 1; j <= totalCols; j++) {
                      int price = i < 5 ? 10 : 8;
                      JsonObjectBuilder objectBuilder = isObject()
                              .value("row", i)
                              .value("column", j)
                              .value("price", price);
                      arrayBuilder = arrayBuilder.item(objectBuilder);
                  }
              }
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("seats", arrayBuilder)
                              .value("columns", 9)
                              .value("rows", 9)
              );
      
              return CheckResult.correct();
          }
      
          CheckResult testPurchaseTicket() {
              HttpResponse response = post(
                  "/purchase",
                  gson.toJson(Map.of(
                      "row", "1",
                      "column", "1"
                  ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson()
                  .check(
                      isObject()
                          .value("row", 1)
                          .value("column", 1)
                          .value("price", 10)
                  );
              return CheckResult.correct();
          }
      
          CheckResult testErrorMessageThatTicketHasBeenPurchased() {
              HttpResponse response = post(
                  "/purchase",
                  gson.toJson(Map.of(
                      "row", "1",
                      "column", "1"
                  ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                  .check(
                      isObject()
                          .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                          .anyOtherValues()
                  );
              return CheckResult.correct();
          }
      
          CheckResult testErrorMessageThatNumbersOutOfBounds() {
              HttpResponse response = post(
                  "/purchase",
                  gson.toJson(Map.of(
                      "row", "10",
                      "column", "1"
                  ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                  .check(
                      isObject()
                          .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                          .anyOtherValues()
                  );
      
              response = post(
                  "/purchase",
                  gson.toJson(Map.of(
                      "row", "1",
                      "column", "10"
                  ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                  .check(
                      isObject()
                          .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                          .anyOtherValues()
                  );
      
              response = post(
                  "/purchase",
                  gson.toJson(Map.of(
                      "row", "-1",
                      "column", "-1"
                  ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                  .check(
                      isObject()
                          .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                          .anyOtherValues()
                  );
      
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          DynamicTesting[] dynamicTests = new DynamicTesting[]{
              this::testEndpoint,
              this::testEndpointAvailableSeats,
              this::testPurchaseTicket,
              this::testErrorMessageThatTicketHasBeenPurchased,
              this::testErrorMessageThatNumbersOutOfBounds
          };
      }
    learner_created: false
  - name: src/cinema/Seat.java
    visible: true
    text: |
      package cinema;
      
      import com.fasterxml.jackson.annotation.JsonIgnore;
      
      //POJO
      public class Seat {
          //private int id;
          private int row;
          private int column;
          @JsonIgnore
          private boolean isAvailable;
      
          public int getRow() {
              return row;
          }
      
          public void setRow(int row) {
              this.row = row;
          }
      
          public int getColumn() {
              return column;
          }
      
          public void setColumn(int column) {
              this.column = column;
          }
      
          public boolean isAvailable() {
              return isAvailable;
          }
      
          @JsonIgnore
          public void setAvailable(boolean available) {
              isAvailable = available;
          }
      
          public Seat() {
          }
      
          public Seat(int row, int column, boolean isAvailable) {
              this.row = row;
              this.column = column;
              this.isAvailable = isAvailable;
          }
      }
    learner_created: true
  - name: src/cinema/Cinema.java
    visible: true
    text: |
      package cinema;
      
      import java.util.List;
      
      public class Cinema {
      
          private int rows;
          private int columns;
          private List<Seat> seats;
      
      
          public Cinema() {
          }
      
          public Cinema(int rows, int columns, List<Seat> seats) {
              this.rows = rows;
              this.columns = columns;
              this.seats = seats;
          }
      
          public int getRows() {
              return rows;
          }
      
          public void setRows(int rows) {
              this.rows = rows;
          }
      
          public int getColumns() {
              return columns;
          }
      
          public void setColumns(int columns) {
              this.columns = columns;
          }
      
          public List<Seat> getSeats() {
              return seats;
          }
      
          public void setSeats(List<Seat> seats) {
              this.seats = seats;
          }
      
      }
    learner_created: true
  - name: src/cinema/Controller.java
    visible: true
    text: |-
      package cinema;
      
      import org.springframework.web.bind.annotation.*;
      
      import java.util.ArrayList;
      import java.util.List;
      
      @RestController
      public class Controller {
      
          //need to fill the list with seats
          private final List<Seat> seatList = createList();
      
          private static List<Seat> createList() {
              List<Seat> list = new ArrayList<>();
      
              for (int i = 1; i <= 9; i++) {
                  for (int j = 1; j <= 9; j++) {
                      list.add(new Seat(i, j, true));
                  }
              }
              return list;
          }
      
      
          @GetMapping("/seats")
          public Cinema getSeats() {
              return new Cinema(9, 9, seatList);
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/13376#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 05 Feb 2024 15:55:08 UTC"
record: 2
